Temp_Condo <- Condo|>
select(3, 6, 7, 8, all_of(index_Jan2018_Condo) : ncol(Condo))
#col 3 = City name/Region Name, #col 6 = State Name, $col 7 = Metro; #col 8 = County
# Convert the table from wide to long format as the years are shown in columns
Condo_Price <- pivot_longer(
Temp_Condo,
cols = 5 : ncol(Temp_Condo),
names_to = "Date",
values_to = "Price")
# Format date and change column's names
Condo_Price <- Condo_Price |>
mutate(Date = as.Date(strptime(Date, format = "X%m.%d.%Y")))
names(Condo_Price) <- c("City", "State", "Metro", "County", "Date", "Condo_Price")
# Note: SFH_Price is the table including all Condo prices of the US by City from 2018 to present.
Condo_CA <- Condo_Price |>  # Condo prices in California from 2018 to present.
filter(State == "CA", na.rm = TRUE)
#SFH
by_month_year_SFH <- SFH_CA |> mutate(Year = as.integer(format(as.Date(Date), "%Y")),Month = as.integer(format(as.Date(Date), "%m")))|>
group_by(Year)
#mean price SFH by year
mean_by_year_SFH <- by_month_year_SFH |> group_by(Year, Month) |> summarize(mean_SFH_price = mean(SFH_Price,na.rm = TRUE)) |> ungroup()
#Condo
by_month_year_Condo <- Condo_CA |> mutate(Year = as.integer(format(as.Date(Date), "%Y")),Month = as.integer(format(as.Date(Date), "%m")))|>
group_by(Year)
#mean price Condo by year
mean_by_year_Condo <- by_month_year_Condo |> group_by(Year, Month) |> summarize(mean_Condo_price = mean(Condo_Price,na.rm = TRUE)) |> ungroup()
#we will use two data: mean_by_year_SFH and mean_by_year_Condo for the hypothesis testing (both n = 75)
library(stats)
result <- t.test(x = mean_by_year_SFH, y = mean_by_year_Condo, alternative = "two.sided")
print(result)
#SFH
by_month_year_SFH <- SFH_CA |> mutate(Year = as.integer(format(as.Date(Date), "%Y")),Month = as.integer(format(as.Date(Date), "%m")))|>
group_by(Year)
#mean price SFH by year
mean_by_year_SFH <- by_month_year_SFH |> group_by(Year, Month) |> summarize(mean_SFH_price = mean(SFH_Price,na.rm = TRUE)) |> ungroup()
#Condo
by_month_year_Condo <- Condo_CA |> mutate(Year = as.integer(format(as.Date(Date), "%Y")),Month = as.integer(format(as.Date(Date), "%m")))|>
group_by(Year)
#mean price Condo by year
mean_by_year_Condo <- by_month_year_Condo |> group_by(Year, Month) |> summarize(mean_Condo_price = mean(Condo_Price,na.rm = TRUE)) |> ungroup()
#we will use two data: mean_by_year_SFH and mean_by_year_Condo for the hypothesis testing (both n = 75)
library(stats)
result <- t.test(x = mean_by_year_SFH, y = mean_by_year_Condo, alternative = "two.sided")
print(result)
library(dplyr, quietly = TRUE)
library(tidyverse, quietly = TRUE)
library(ggplot2, quietly = TRUE)
# read the Single Family House Data
SFH <- read.csv("D:/SP__24/MATH 167R/Project/167R/Single Family House.csv")
# read the Single Condo Data
Condo <- read.csv("D:/SP__24/MATH 167R/Project/167R/Condo.csv")
library(dplyr, quietly = TRUE)
library(tidyverse, quietly = TRUE)
library(ggplot2, quietly = TRUE)
# read the Single Family House Data
SFH <- read.csv("D:/SP__24/MATH 167R/Project/167R/Single Family House.csv")
# read the Single Condo Data
Condo <- read.csv("D:/SP__24/MATH 167R/Project/167R/Condo.csv")
# Find the index of the column of Jan 2018
index_Jan2018 <- grep("2018", colnames(SFH))[1] #[1] to get the first col in 2018
# Extract the data since Jan 2018 to the latest
Temp_SFH <- SFH|>
select(3, 6, 7, 8, all_of(index_Jan2018_Condo) : ncol(SFH))
# Convert the table from wide to long format as the years are shown in columns
SFH_Price <- pivot_longer(
Temp_SFH,
cols = 5 : ncol(Temp_SFH),
names_to = "Date",
values_to = "Price")
# Format date and change column's names
SFH_Price <- SFH_Price |>
mutate(Date = as.Date(strptime(Date, format = "X%m.%d.%Y")))
names(SFH_Price) <- c("City", "State", "Metro", "County", "Date", "SFH_Price")
# Note: SFH_Price is the table including all single family homes prices of the US by City from 2018 to present.
SFH_CA <- SFH_Price |>  # single family homes prices in California from 2018 to present.
filter(State == "CA", na.rm = TRUE)
# Find the index of the column of Jan 2018
index_Jan2018_Condo <- grep(2018, colnames(Condo))[1] #[1] to get the first col in 2018
# Extract the data since Jan 2018 to the latest
Temp_Condo <- Condo|>
select(3, 6, 7, 8, all_of(index_Jan2018_Condo) : ncol(Condo))
#col 3 = City name/Region Name, #col 6 = State Name, $col 7 = Metro; #col 8 = County
# Convert the table from wide to long format as the years are shown in columns
Condo_Price <- pivot_longer(
Temp_Condo,
cols = 5 : ncol(Temp_Condo),
names_to = "Date",
values_to = "Price")
# Format date and change column's names
Condo_Price <- Condo_Price |>
mutate(Date = as.Date(strptime(Date, format = "X%m.%d.%Y")))
names(Condo_Price) <- c("City", "State", "Metro", "County", "Date", "Condo_Price")
# Note: SFH_Price is the table including all Condo prices of the US by City from 2018 to present.
Condo_CA <- Condo_Price |>  # Condo prices in California from 2018 to present.
filter(State == "CA", na.rm = TRUE)
Join_HP_CA <- merge(SFH_CA, Condo_CA, by = c("City", "State", "Metro", "County", "Date"), all = TRUE)
# B1.1. Find Median Price
Median_HP_CA <- Join_HP_CA |>
mutate(Year = format(Date, "%Y")) |>
group_by(Year) |>
summarize (Median_SFH_Price = median(SFH_Price, na.rm = TRUE),
Median_Condo_Price = median(Condo_Price, na.rm = TRUE))
Median_HP_CA$Year <- as.numeric(Median_HP_CA$Year) # convert Year Column to numeric
ggplot(Median_HP_CA, aes(x = Year)) +
geom_line(aes(y = Median_SFH_Price, color = "Median_SFH_Price")) +
geom_line(aes(y = Median_Condo_Price, color = "Median_Condo_Price")) +
labs(title = "House Prices in California from 2018 to Present",
x = "Year",
y = "Mean Price") +
scale_color_manual(values = c("Median_SFH_Price" = "blue", "Median_Condo_Price" = "red")) +
scale_y_continuous(labels = scales::dollar_format(prefix = "$"), breaks = seq(0, 1000000, by = 50000)) +
theme_minimal()
# B1.2. Find Mean Price
Mean_HP_CA <- Join_HP_CA |>
mutate(Year = format(Date, "%Y")) |>
group_by(Year) |>
summarize (Mean_SFH_Price = mean(SFH_Price, na.rm = TRUE),
Mean_Condo_Price = mean(Condo_Price, na.rm = TRUE))
Mean_HP_CA$Year <- as.numeric(Mean_HP_CA$Year) # convert Year Column to numeric
ggplot(Mean_HP_CA, aes(x = Year)) +
geom_line(aes(y = Mean_SFH_Price, color = "Mean_SFH_Price")) +
geom_line(aes(y = Mean_Condo_Price, color = "Mean_Condo_Price")) +
labs(title = "House Prices in California from 2018 to Present",
x = "Year",
y = "Mean Price") +
scale_color_manual(values = c("Mean_SFH_Price" = "blue", "Mean_Condo_Price" = "red")) +
scale_y_continuous(labels = scales::dollar_format(prefix = "$"), breaks = seq(0, 1000000, by = 50000)) +
theme_minimal()
# Find Median Price based on County and sort the data by median value from high to low
#Condo
Condo_CA_County <- Condo_CA |>
mutate(Year = format(Date, "%Y")) |>
group_by(Year, County) |>
summarize (Median_Condo_CA_County = median(Condo_Price, na.rm = TRUE),
.groups = 'drop') |>
arrange(desc(Year), desc(Median_Condo_CA_County))
Condo_CA_County
Highest_Condo_Prices_byYear <- Condo_CA_County |>
group_by(Year) |>
top_n(1, Median_Condo_CA_County)
Lowest_Condo_Prices_byYear <- Condo_CA_County |>
group_by(Year) |>
top_n(-1, Median_Condo_CA_County)
print(Highest_Condo_Prices_byYear)
Lowest_Condo_Prices_byYear
#Single Family Home
SFH_CA_County <- SFH_CA |>
mutate(Year = format(Date, "%Y")) |>
group_by(Year, County) |>
summarize (Median_SFH_CA_County = median(SFH_Price, na.rm = TRUE),
.groups = 'drop') |>
arrange(desc(Year), desc(Median_SFH_CA_County))
SFH_CA_County
Highest_SFH_Prices_byYear <- SFH_CA_County |>
group_by(Year) |>
top_n(1, Median_SFH_CA_County)
Lowest_SFH_Prices_byYear <- SFH_CA_County |>
group_by(Year) |>
top_n(-1, Median_SFH_CA_County)
print(Highest_SFH_Prices_byYear)
Lowest_SFH_Prices_byYear
# plot house prices in Santa Clara County
Median_HP_SantaClara <- Join_HP_CA |>
filter(County == "Santa Clara County")|>
group_by(Date, City) |>
summarize (Median_SFH_Price_SantaClara = median(SFH_Price, na.rm = TRUE),
Median_Condo_Price_SantaClara = median(Condo_Price, na.rm = TRUE))
Median_HP_SantaClara_filtered <- na.omit(Median_HP_SantaClara)
# plot Median Single Family Home Prices in Santa Clara COunty
ggplot(Median_HP_SantaClara_filtered,
aes(x = Date, y = Median_SFH_Price_SantaClara, group = City, color = City)) +
labs(title = "Median Single Family Home Prices in Santa Clara County from 2018 to present",
x = "Year",
y = "Median Single Family Home Prices")+
geom_line(size = 1) +
scale_y_continuous(labels = scales::dollar_format(prefix = "$"), breaks = seq(0, 5000000, by = 500000)) +
theme_minimal()
# plot Median Condo Prices in Santa Clara County
ggplot(Median_HP_SantaClara_filtered,
aes(x = Date, y = Median_Condo_Price_SantaClara, group = City, color = City)) +
labs(title = "Median Single Condo Prices in Santa Clara County from 2018 to present",
x = "Year",
y = "Median Single Family Home Prices")+
geom_line(size = 1) +
scale_y_continuous(labels = scales::dollar_format(prefix = "$"), breaks = seq(0, 3000000, by = 250000)) +
theme_minimal()
#SFH
by_month_year_SFH <- SFH_Price |> mutate(Year = as.integer(format(as.Date(Date), "%Y")),Month = as.integer(format(as.Date(Date), "%m")))|>
group_by(Year)
#mean price SFH by year
mean_by_year_SFH <- by_month_year_SFH |> group_by(Year, Month) |> summarize(mean_SFH_price = mean(SFH_Price,na.rm = TRUE),  .groups = 'drop') |> ungroup()
#Condo
by_month_year_Condo <- Condo_Price |> mutate(Year = as.integer(format(as.Date(Date), "%Y")),Month = as.integer(format(as.Date(Date), "%m")))|>
group_by(Year)
#mean price Condo by year
mean_by_year_Condo <- by_month_year_Condo |> group_by(Year, Month) |> summarize(mean_Condo_price = mean(Condo_Price,na.rm = TRUE),  .groups = 'drop') |> ungroup()
#we will use two data: mean_by_year_SFH and mean_by_year_Condo for the hypothesis testing (both n = 75)
library(stats)
result <- t.test(x = mean_by_year_SFH, y = mean_by_year_Condo, alternative = "two.sided")
print(result)
#SFH
by_month_year_SFH <- SFH_Price |> mutate(Year = as.integer(format(as.Date(Date), "%Y")),Month = as.integer(format(as.Date(Date), "%m")))|>
group_by(Year)
#mean price SFH by year
mean_by_year_SFH <- by_month_year_SFH |> group_by(Year, Month) |> summarize(mean_SFH_price = mean(SFH_Price,na.rm = TRUE),.groups = 'drop') |> ungroup()
#Condo
by_month_year_Condo <- Condo_Price |> mutate(Year = as.integer(format(as.Date(Date), "%Y")),Month = as.integer(format(as.Date(Date), "%m")))|>
group_by(Year)
#mean price Condo by year
mean_by_year_Condo <- by_month_year_Condo |> group_by(Year, Month) |> summarize(mean_Condo_price = mean(Condo_Price,na.rm = TRUE),.groups = 'drop') |> ungroup()
#we will use two data: mean_by_year_SFH and mean_by_year_Condo for the hypothesis testing (both n = 75)
library(stats)
result <- t.test(x = mean_by_year_SFH, y = mean_by_year_Condo, alternative = "two.sided")
print(result)
View(SFH_CA)
unique(SFH_CA$State)
by_month_year_SFH <- SFH_CA |> mutate(Year = as.integer(format(as.Date(Date), "%Y")),Month = as.integer(format(as.Date(Date), "%m")))|>
group_by(Year)
#mean price SFH by year
mean_by_year_SFH <- by_month_year_SFH |> group_by(Year, Month) |> summarize(mean_SFH_price = mean(SFH_CA,na.rm = TRUE),.groups = 'drop') |> ungroup()
#SFH
by_month_year_SFH <- SFH_CA |> mutate(Year = as.integer(format(as.Date(Date), "%Y")),Month = as.integer(format(as.Date(Date), "%m")))|>
group_by(Year)
#mean price SFH by year
mean_by_year_SFH <- by_month_year_SFH |> group_by(Year, Month) |> summarize(mean_SFH_price = mean(SFH_CA,na.rm = TRUE),.groups = 'drop') |> ungroup()
#Condo
by_month_year_Condo <- Condo_CA |> mutate(Year = as.integer(format(as.Date(Date), "%Y")),Month = as.integer(format(as.Date(Date), "%m")))|>
group_by(Year)
#mean price Condo by year
mean_by_year_Condo <- by_month_year_Condo |> group_by(Year, Month) |> summarize(mean_Condo_price = mean(Condo_CA,na.rm = TRUE),.groups = 'drop') |> ungroup()
#we will use two data: mean_by_year_SFH and mean_by_year_Condo for the hypothesis testing (both n = 75)
library(stats)
result <- t.test(x = mean_by_year_SFH, y = mean_by_year_Condo, alternative = "two.sided")
print(result)
View(mean_by_year_SFH)
View(mean_by_year_SFH)
View(mean_by_year_Condo)
by_month_year_SFH <- SFH_CA |> mutate(Year = as.integer(format(as.Date(Date), "%Y")),Month = as.integer(format(as.Date(Date), "%m")))|>
group_by(Year)
View(by_month_year_SFH)
mean_by_year_SFH <- by_month_year_SFH |> group_by(Year, Month) |> summarize(mean_SFH_price = mean(SFH_CA,na.rm = TRUE),.groups = 'drop') |> ungroup()
View(by_month_year_SFH)
mean_by_year_SFH <- by_month_year_SFH |> group_by(Year, Month) |> summarize(mean_SFH_price = mean(SFH_CA,na.rm = TRUE),.groups = 'drop') |> ungroup()
by_month_year_SFH <- SFH_CA |> mutate(Year = as.integer(format(as.Date(Date), "%Y")),Month = as.integer(format(as.Date(Date), "%m")))|>
group_by(Year)
#mean price SFH by year
mean_by_year_SFH <- by_month_year_SFH |> group_by(Year, Month) |> summarize(mean_SFH_price = mean(SFH_CA,na.rm = TRUE)) |> ungroup()
View(by_month_year_SFH)
View(mean_by_year_SFH)
View(SFH_CA)
mean_by_year_SFH <- by_month_year_SFH |> group_by(Year, Month) |> summarize(mean_SFH_price = mean(SFH_CA$SFH_Price,na.rm = TRUE)) |> ungroup()
View(mean_by_year_SFH)
View(SFH_CA)
by_month_year_SFH <- SFH_CA |> mutate(Year = as.integer(format(as.Date(Date), "%Y")),Month = as.integer(format(as.Date(Date), "%m")))|>
group_by(Year)
by_month_year_SFH <- SFH_CA |> mutate(Year = as.integer(format(as.Date(Date), "%Y")),Month = as.integer(format(as.Date(Date), "%m")))|>
group_by(Year)
#mean price SFH by year
mean_by_year_SFH <- by_month_year_SFH |> group_by(Year, Month) |> summarize(mean_SFH_price = mean(SFH_Price,na.rm = TRUE),.groups = 'drop') |> ungroup()
View(mean_by_year_SFH)
View(by_month_year_Condo)
View(by_month_year_Condo)
#Condo
by_month_year_Condo <- Condo_CA |> mutate(Year = as.integer(format(as.Date(Date), "%Y")),Month = as.integer(format(as.Date(Date), "%m")))|>
group_by(Year)
#mean price Condo by year
mean_by_year_Condo <- by_month_year_Condo |> group_by(Year, Month) |> summarize(mean_Condo_price = mean(Condo_Price,na.rm = TRUE),.groups = 'drop') |> ungroup()
library(stats)
result <- t.test(x = mean_by_year_SFH, y = mean_by_year_Condo, alternative = "two.sided")
print(result)
library(stats)
result <- t.test(x = mean_by_year_SFH, y = mean_by_year_Condo, alternative = "two.sided")
print(result)
#SFH
by_month_year_SFH <- SFH_CA |> mutate(Year = as.integer(format(as.Date(Date), "%Y")),Month = as.integer(format(as.Date(Date), "%m")))|>
group_by(Year)
#mean price SFH by year
mean_by_year_SFH <- by_month_year_SFH |> group_by(Year, Month) |> summarize(mean_SFH_price = mean(SFH_Price,na.rm = TRUE),.groups = 'drop') |> ungroup()
#Condo
by_month_year_Condo <- Condo_CA |> mutate(Year = as.integer(format(as.Date(Date), "%Y")),Month = as.integer(format(as.Date(Date), "%m")))|>
group_by(Year)
#mean price Condo by year
mean_by_year_Condo <- by_month_year_Condo |> group_by(Year, Month) |> summarize(mean_Condo_price = mean(Condo_Price,na.rm = TRUE),.groups = 'drop') |> ungroup()
#we will use two data: mean_by_year_SFH and mean_by_year_Condo for the hypothesis testing (both n = 75)
library(stats)
result <- t.test(x = mean_by_year_SFH, y = mean_by_year_Condo, alternative = "two.sided")
print(result)
library(tidyverse)
AS_flights <- flights[flights$carrier == "AS" , ]
library(palmerpenguins)
library(dplyr)
library(tidyverse)
data("penguins")
library(palmerpenguins)
library(dplyr)
library(tidyverse)
data("penguins")
#filter data of female Adelie, then calculate the mean and sd of body_mass
female_Adelie <- penguins |>
filter( species == "Adelie" & sex == "female")
mean_body_mass_female_Adelie <- mean(female_Adelie$body_mass_g, na.rm = T)
sd_body_mass_female_Adelie <- sd(female_Adelie$body_mass_g, na.rm = T)
#CI for mean(body_mass) using Central Limit Thm with confidence level 95%
z_score <- abs(qnorm(0.05/2, mean = 0, sd = 1))
margin_of_error <-z_score*(sd_body_mass_female_Adelie)/(sqrt(nrow(female_Adelie)))
A1_lower_bound <- mean_body_mass_female_Adelie - margin_of_error
A1_upper_bound <- mean_body_mass_female_Adelie + margin_of_error
#Print the result
A1_lower_bound
A1_upper_bound
sprintf("The 95%% CI for the mean body_mass for female Adelein is: (%.2f - %.2f)", A1_lower_bound, A1_upper_bound)
set.seed(123)
boostrap_mean <- replicate(n=10000, mean(sample(female_Adelie$body_mass_g,  replace = TRUE)))
A2_CI  <- quantile(boostrap_mean, probs = c(.025, .975))
print("95% confidence interval for the mean `body_mass_g` for female Adelie penguins using 10000 resamples")
A2_CI
boostrap_median <- replicate( n=10000, median(sample(female_Adelie$body_mass_g, replace = TRUE)))
A3_CI  <- quantile(boostrap_median, probs = c(.025, .975))
print(" 95% confidence interval for the median `body_mass_g` for female Adelie penguins using 10000 resamples")
A3_CI
#set.seed(123)
X_B4 <- rexp(10000000, rate = 1)
Y_B4 <- rpois(10000000, lambda = X_B4)
B4_mean_Y <- mean(Y_B4)
B4_var_Y <- var(Y_B4)
sprintf("Mean of Y is: %.4f", B4_mean_Y)
sprintf("Var of Y is: %.4f", B4_var_Y)
set.seed(123)
CI_binomial_fun <- function(n, p ){
X_B5 <- rbinom(1,n,p)
z_score <- abs(qnorm((0.05/2), mean = 0, sd = 1))
p_hat <- X_B5/n
B5_margin_of_error <- z_score*sqrt(p_hat*(1-p_hat)/n)
#Calculate the CI
B5_lower_bound <- p_hat - B5_margin_of_error
B5_upper_bound <- p_hat + B5_margin_of_error
in_CI <- (p >= B5_lower_bound & p <= B5_upper_bound)
return (in_CI)
}
in_CI <- CI_binomial_fun(100,0.3)
print(in_CI)
second_function <- function ( n, p, n_runs){
single_run <- function() {
CI_binomial_fun(n,p) #this is the function in part a
}
results <- replicate(n_runs,single_run())
proportion  <- mean(results)
return(proportion)
}
B_5b_proportion <- second_function(20, 0.5, 1000)
B_5b_proportion
n <- sequence(10, 10, 10)
p <- sequence (9, 1, 1 )/10
n_runs <- 100
cover_range <- matrix(0, nrow = length(n), ncol = length(p))
rownames (cover_range) <- n
colnames (cover_range) <- p
row_num <- 0
for ( i in n) {
row_num <- row_num + 1
col_num <- 0
for (j in p) {
col_num <- col_num + 1
cover_proportion <- second_function(i, j, n_runs)
cover_range[row_num, col_num] <- cover_proportion
}
}
print(cover_range)
library(tidyverse)
library(nycflights13)
data("flights")
flights_sample <- flights |> filter(carrier == c("HA", "AS"))
AS_flights <- flights[flights$carrier == "AS", ]
#calculate mean and sd
AS_mean_arr_delay <- mean(AS_flights$arr_delay, na.rm = T)
AS_sd_arr_delay <- sd(AS_flights$arr_delay, na.rm = T)
z_score <- abs(qnorm(0.05/2, mean = 0, sd = 1))
AS_margin_error <- z_score*(AS_sd_arr_delay)/(sqrt(nrow(AS_flights)))
ASflights_lower_bound <- AS_mean_arr_delay - AS_margin_error
ASflights_upper_bound <- AS_mean_arr_delay + AS_margin_error
#Print the result
sprintf("The 95%% CI for the mean arr_delay for Alaska Airlines flights is: (%.4f , %.4f)", ASflights_lower_bound, ASflights_upper_bound )
HA_flights <- flights[flights$carrier == "HA" , ]
HA_mean_arr_delay <- mean(HA_flights$arr_delay, na.rm = T)
HA_sd_arr_delay <- sd(HA_flights$arr_delay, na.rm = T)
z_score <- abs(qnorm(0.05/2, mean = 0, sd = 1))
HA_margin_error <- z_score*(HA_sd_arr_delay)/(sqrt(nrow(HA_flights)))
HAflights_lower_bound <- HA_mean_arr_delay - HA_margin_error
HAflights_upper_bound <- HA_mean_arr_delay + HA_margin_error
#Print the result
sprintf("95%% confidence interval for the mean `arr_delay` for Hawaiian Airlines flights: (%.4f , %.4f)", HAflights_lower_bound, HAflights_upper_bound)
HA_flights_no_delay <- flights[flights$carrier == "HA" & flights$arr_delay > 0 ,]
sample_size <- nrow(HA_flights)
phat <- nrow(HA_flights_no_delay)/sample_size #p = x/n
z_score <- abs(qnorm(0.05/2, mean = 0, sd = 1))
HA_no_delay_margin_error <- z_score*sqrt(phat*(1-phat)/sample_size)
HAflights_no_delay_lower_bound <- phat - HA_no_delay_margin_error
HAflights_no_delay_upper_bound <- phat + HA_no_delay_margin_error
#Print the result
phat
sprintf("95%% confidence interval for the proportion of flights for which `arr_delay > 0`for Hawaiian Airlines flights:(%.4f , %.4f)",
HAflights_no_delay_lower_bound, HAflights_no_delay_upper_bound)
library(tidyverse)
AS_flights <- flights[flights$carrier == "AS" , ]
HA_flights <- flights[flights$carrier == "HA" , ]
t.test(AS_flights$arr_delay, HA_flights$arr_delay, var.equal=TRUE)
evals <- readr::read_csv("https://www.openintro.org/book/statdata/evals.csv")
evals_lm = lm(score ~ age, data = evals)
evals_lm
summary(evals_lm)
ggplot(evals_lm, mapping = aes(x = age, y = score)) +
geom_point() +
geom_smooth(method = "lm")
qqnorm(resid(evals_lm))
library(tidyverse)
#recode the gender by Female is 1 and male is 0
library(tidyverse)
evals_mutate <- evals |> mutate (gender = recode (gender, "female" = 1, "male" = 0))
new_evals_mutate_lm = lm(score ~ age + gender , data = evals_mutate)
new_evals_mutate_lm
summary(new_evals_mutate_lm)
plot(new_evals_mutate_lm)
rate30us <- read.csv("D:/SP__24/MATH 167R/Project/167R/MORTGAGE30US.csv")
by_month_year_rate30 <- rate30us |> mutate(Year = as.integer(format(as.Date(Date), "%Y")),Month = as.integer(format(as.Date(Date), "%m")))|>
group_by(Year)
by_month_year_rate30 <- rate30us |> mutate(Year = as.integer(format(as.Date(DATE), "%Y")),Month = as.integer(format(as.Date(DATE), "%m")))|>
group_by(Year)
View(rate30us)
library(dplyr, quietly = TRUE)
library(tidyverse, quietly = TRUE)
library(ggplot2, quietly = TRUE)
# read the Single Family House Data
SFH <- read.csv("D:/SP__24/MATH 167R/Project/167R/Single Family House.csv")
# read the Single Condo Data
Condo <- read.csv("D:/SP__24/MATH 167R/Project/167R/Condo.csv")
rate30us <- read.csv("D:/SP__24/MATH 167R/Project/167R/MORTGAGE30US.csv")
by_month_year_rate30 <- rate30us |> mutate(Year = as.integer(format(as.Date(DATE), "%Y")),Month = as.integer(format(as.Date(DATE), "%m")))|>
group_by(Year)
View(by_month_year_rate30)
by_month_year_rate30_from2018 -> filter(Year >="2018")
by_month_year_rate30 <- rate30us |> mutate(Year = as.integer(format(as.Date(DATE), "%Y")),Month = as.integer(format(as.Date(DATE), "%m")))|>
group_by(Year)
by_month_year_rate30_from2018 -> filter(Year >="2018")
by_month_year_rate30 <- rate30us |> mutate(Year = as.integer(format(as.Date(DATE), "%Y")),Month = as.integer(format(as.Date(DATE), "%m")))|>
group_by(Year)
by_month_year_rate30_from2018 <- filter(Year >="2018")
View(by_month_year_rate30)
by_month_year_rate30 <- rate30us |> mutate(Year = as.integer(format(as.Date(DATE), "%Y")),Month = as.integer(format(as.Date(DATE), "%m")))|>
group_by(Year)
by_month_year_rate30_from2018 <- filter(by_month_year_rate30, Year >="2018")
View(by_month_year_rate30_from2018)
by_month_year_rate30 <- rate30us |> mutate(Year = as.integer(format(as.Date(DATE), "%Y")),Month = as.integer(format(as.Date(DATE), "%m")))|>
group_by(Year)
by_month_year_rate30_from2018 <- filter(by_month_year_rate30, Year >="2018") |> group_by(Year, Month) |>summarize(mean_rate30 = mean(MORTGAGE30US,na.rm = TRUE),.groups = 'drop') |> ungroup()
View(by_month_year_rate30_from2018)
View(by_month_year_rate30_from2018)
View(mean_by_year_SFH)
SFH_with_rate30 <- full_join(by_month_year_rate30_from2018,mean_by_year_SFH, by = c("Month","Year" ))
View(SFH_with_rate30)
SHF_with_rate30 <- full_join(by_month_year_rate30_from2018,mean_by_year_SFH, by = c("Month","Year" ))
rm(SFH_with_rate30)
View(SHF_with_rate30)
lm_res_SHF = lm_res_SHF = lm(mean_SFH_price ~ mean_rate30, data = mean_by_year_SFH)
lm_res_SHF = lm(mean_SFH_price ~ mean_rate30, data = mean_by_year_SFH)
rm(SHF_with_rate30)
by_month_year_rate30 <- rate30us |> mutate(Year = as.integer(format(as.Date(DATE), "%Y")),Month = as.integer(format(as.Date(DATE), "%m")))|>
group_by(Year)
#MORGAGE RATE 30 US by YEAR/Month
by_month_year_rate30_from2018 <- filter(by_month_year_rate30, Year >="2018") |> group_by(Year, Month) |>summarize(mean_rate30 = mean(MORTGAGE30US,na.rm = TRUE),.groups = 'drop') |> ungroup()
#Merge/ combine date "by_month_year_rate30_from2018" and "mean_by_year_SFH"
SFH_with_rate30 <- full_join(by_month_year_rate30_from2018,mean_by_year_SFH, by = c("Month","Year" ))
lm_res_SHF = lm_res_SHF = lm(mean_SFH_price ~ mean_rate30, data = mean_by_year_SFH)
by_month_year_rate30 <- rate30us |> mutate(Year = as.integer(format(as.Date(DATE), "%Y")),Month = as.integer(format(as.Date(DATE), "%m")))|>
group_by(Year)
#MORGAGE RATE 30 US by YEAR/Month
by_month_year_rate30_from2018 <- filter(by_month_year_rate30, Year >="2018") |> group_by(Year, Month) |>summarize(mean_rate30 = mean(MORTGAGE30US,na.rm = TRUE),.groups = 'drop') |> ungroup()
#Merge/ combine date "by_month_year_rate30_from2018" and "mean_by_year_SFH"
SFH_with_rate30 <- full_join(by_month_year_rate30_from2018,mean_by_year_SFH, by = c("Month","Year" ))
lm_res_SHF = lm(mean_SFH_price ~ mean_rate30, data = mean_by_year_SFH)
View(mean_by_year_SFH)
lm_res_SHF = lm(mean_SFH_price ~ mean_rate30, data = SFH_with_rate30)
lm_res_SHF
#for SFH
lm_res_SHF = lm(mean_SFH_price ~ mean_rate30, data = SFH_with_rate30)
lm_res_SHF
#plot
plot(mean_SFH_price ~ mean_rate30, data = SFH_with_rate30,
xlab = "Rate (%)",
ylab = "SFH price ($)",
pch  = 16, col  = "blue")
abline(lm_res_SHF,  col = "red")
View(SFH_with_rate30)
#Merge/ combine date "by_month_year_rate30_from2018" and "mean_by_year_SFH"
Condo_with_rate30 <- full_join(by_month_year_rate30_from2018,mean_by_year_Condo, by = c("Month","Year" ))
#for SFH
lm_res_SHF = lm(mean_SFH_price ~ mean_rate30, data = SFH_with_rate30)
lm_res_SHF
#plot
plot(mean_SFH_price ~ mean_rate30, data = SFH_with_rate30,
xlab = "Rate (%)",
ylab = "SFH price ($)",
pch  = 16, col  = "blue")
abline(lm_res_SHF,  col = "red")
#For COndo
lm_res_Condo = lm(mean_Condo_price ~ mean_rate30, data = Condo_with_rate30)
lm_res_Condo
#plot
plot(mean_Condo_price ~ mean_rate30, data = Condo_with_rate30,
xlab = "Rate (%)",
ylab = "Condo price ($)",
pch  = 16, col  = "purple")
abline(lm_res_Condo,  col = "black")
